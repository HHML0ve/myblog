# coding:utf-8
"""
Django settings for maozi_blog project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 这个是项目的根目录
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 这个是安全码，项目要想启动必须要由它。Django 在创建项目的时候会自动生成这个安全码
SECRET_KEY = 'j!7=5qqq@jzeqeevmv#^dj9&hhvv9gt3!9csp9(#m7drs1zod3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

# 原装的应用，Django 的项目中是有许多个应用组成的，默认生成的是 Django 自带的应用。
# 如果我们创建了自己的应用，要把应用写在这个里面，这样才能被 Django 识别。接着运行命令 py manage.py makemigrations app_name
# 创建的应用名称不可以和 python 中的模块名称相同，否则创建不成功
INSTALLED_APPS = [
    'poll.apps.PollConfig',
    'knowledge.apps.KnowledgeConfig',
    'django.contrib.admin',                     # 管理员站点
    'django.contrib.auth',                      # 认证授权系统
    'django.contrib.contenttypes',              # 内容类型框架
    'django.contrib.sessions',                  # 会话框架
    'django.contrib.messages',                  # 消息框架
    'django.contrib.staticfiles',               # 管理静态文件的框架

    # poll.apps.PollConfig 不可与 poll 同时写
    # 'knowledge',
    'story',
    # 'poll',
    'amber'
]

# 在使用数据库之前，使用命令启动INSTALLED_APPS配置的内容。如果你不需要某个或某些应用，你可以在运行 migrate 前毫无顾虑地从 INSTALLED_APPS 里注释或者删除掉它们。 migrate 命令只会为在 INSTALLED_APPS 里声明了的应用进行数据库迁移。
# 命令： py manage.py migrate

# 中间件，Django 自带的工具集。
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# url 的跟文件，指向的是 urls.py 文件
ROOT_URLCONF = 'maozi_blog.urls'

# 模板配置  这里描述了Django如何载入和渲染模板
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,                       # 这一选项将会让 DjangoTemplates 在每个 INSTALLED_APPS 文件夹中寻找 "templates" 子目录。
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'maozi_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# 数据库配置，默认使用的是 sqlite3 数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
# 更具扩展性的数据库，例如 PostgreSQL
# 如果你想使用其他数据库，你需要安装合适的 database bindings
# ENGING - bindings
# 'django.db.backends.sqlite3'， 数据库将是你电脑上的一个文件，在这种情况下， NAME 应该是此文件的绝对路径，包括文件名。默认值 os.path.join(BASE_DIR, 'db.sqlite3') 将会把数据库文件储存在项目的根目录。
# 如果不使用 SQLite，则必须添加一些额外设置，比如 USER 、 PASSWORD 、 HOST 等等。
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': 'mydatabaseuser',
        'PASSWORD': 'mypassword',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}
"""
# 还需要保证 1、在使用前已经创建了数据库 2、还要确保该数据库用户中提供 mysite/settings.py 具有 "create database" 权限
# 'django.db.backends.postgresql'，'django.db.backends.mysql'，或 'django.db.backends.oracle'
# NAME - 数据库的名称。


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

# 跟密码认证有关
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# 配置语言，时区等
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# 静态文件的地址
STATIC_URL = '/static/'
